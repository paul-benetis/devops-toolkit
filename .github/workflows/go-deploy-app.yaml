name: Deploy Go App to AWS ECR

on:
  push:
    branches:
      - main
    paths:
      - app/**
  workflow_dispatch:

env:
  APP_NAME: ${{ secrets.APP_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    permissions:
      id-token: write
    strategy:
      matrix:
        goarch: [arm64]
        goos: [linux]

    steps:
      - name: Set derived environment variables
        run: |
          echo "Set env var for task definition file name to be used later im multiple steps"
          echo "TASK_DEF_FILE=${APP_NAME}-task-def.json" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_GITHUB_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Extract Go Version from go.mod
        id: goversion
        run: |
          set -e
          version=$(grep '^go ' go.mod | awk '{print $2}')
          echo "go_version=$version" >> $GITHUB_OUTPUT

      - name: Verify Extracted Go Version
        run: |
          echo "Extracted Go version: ${{ steps.goversion.outputs.go_version }}"

      - name: Setup Go
        id: setup-go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ steps.goversion.outputs.go_version }}

      - name: Build Go App
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o ${{ env.APP_NAME }} .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.repository}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform linux/arm64 --build-arg APP_NAME=${{ env.APP_NAME }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.11.4

      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Get ECS Task Definition JSON
        working-directory: ./terraform
        run: |
          terraform show -json | jq -c '
            .values.root_module.child_modules
            | map(select(.address == "module.ecs_service"))
            | map(.resources[] | select(.type == "aws_ecs_task_definition" and .name == "this") | .values)
            | first
            | {
                family: .family,
                networkMode: .network_mode,
                executionRoleArn: .execution_role_arn,
                taskRoleArn: .task_role_arn,
                containerDefinitions: (.container_definitions | fromjson),
                requiresCompatibilities: .requires_compatibilities,
                cpu: .cpu,
                memory: .memory,
                runtimePlatform: (
                  if .runtime_platform and (.runtime_platform | length > 0) then {
                    cpuArchitecture: .runtime_platform[0].cpu_architecture,
                    operatingSystemFamily: .runtime_platform[0].operating_system_family
                  } else null end
                )
              }
          ' > ../${{ env.TASK_DEF_FILE }}

      - name: Print task definition (debug)
        run: cat ../${{ env.TASK_DEF_FILE }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.7.3
        with:
          task-definition: ${{ env.TASK_DEF_FILE }}
          container-name: ${{ env.APP_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.3.2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.APP_NAME }}
          cluster: ecs-${{ env.APP_NAME }}
          wait-for-service-stability: true

      - name: Deployment complete
        run: echo "âœ… ECS service '${{ env.APP_NAME }}' successfully deployed with image ${{ steps.build-image.outputs.image }}"
